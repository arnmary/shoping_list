// üîπ –Ü–º–ø–æ—Ä—Ç —Ç–∏–ø—ñ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π —É Vercel
import { VercelRequest, VercelResponse } from '@vercel/node';

// üîπ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —ñ–∑ JSON
import wordsData from '../data/words.json';

// üîπ –û–±–º–µ–∂—É—î–º–æ –¥–æ–ø—É—Å—Ç–∏–º—ñ –∫–æ–¥–∏ –º–æ–≤
type LangCode = 'uk' | 'ru' | 'en' | 'pl';

/**
 * üîπ –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—É –¥–æ /api/suggestions
 *    - –û—á—ñ–∫—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ query (—Ç–µ–∫—Å—Ç) —ñ lang (–∫–æ–¥ –º–æ–≤–∏)
 */
export default function handler(req: VercelRequest, res: VercelResponse) {
  const query = (req.query.query as string)?.toLowerCase() || ''; // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É
  const lang = (req.query.lang as LangCode) || 'uk';              // –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∑–∞–ø–∏—Ç—É

  const langWords = wordsData[lang] || []; // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –º–æ–≤–∏

  // üî∏ –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ª–æ–≤–∞, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
  const result = langWords.filter(word =>
    word.toLowerCase().startsWith(query)
  );

  // üî∏ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫ JSON
  res.status(200).json(result);
}

